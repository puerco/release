timeout: 14400s

#### SECURITY NOTICE ####
# Google Cloud Build (GCB) supports the usage of secrets for build requests.
# Secrets appear within GCB configs as base64-encoded strings.
# These secrets are GCP Cloud KMS-encrypted and cannot be decrypted by any human or system
# outside of GCP Cloud KMS for the GCP project this encrypted resource was created for.
# Seeing the base64-encoded encrypted blob here is not a security event for the project.
#
# Adding new keys to the existing default keyring `release` in the default
# project `k8s-releng-prod` can be done by:
# ```
# gcloud kms keys create $KEY --project k8s-releng-prod --location global --keyring release --purpose encryption
# ```
#
# After that, verify that the key is marked as "Available" there:
# https://console.cloud.google.com/security/kms/keyring/manage/global/release/key?project=k8s-releng-prod
#
# Now encrypt any secret:
# ```
# echo -n my-secret > pw
# gcloud kms encrypt --project k8s-releng-prod --location global --keyring release --key $KEY --plaintext-file pw --ciphertext-file pw.enc
# base64 pw.enc -w0
# ```
#
# Use the base64 output printed above as secretEnv value below. Then just
# reference it via secretEnv in a step.
#
# More details on using encrypted resources on Google Cloud Build can be found here:
# https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-secrets-credentials
#
# (Please do not remove this security notice.)
secrets:
- kmsKeyName: projects/k8s-releng-prod/locations/global/keyRings/release/cryptoKeys/encrypt-0
  secretEnv:
    GITHUB_TOKEN: CiQAIkWjMHZABAFJqEFQir1WipsO3rAGkhw1pwhp1er/m3px/kESUQBLz1D+hzzlrovRVuetP+sCqzjfKZl/iB0aiQIT36imOk8j7laYDZjprxGGQQQiUVaqYvstroJH3D53f4JKQHzXUvWziSSnhH3HFZz++RT/yQ==
    DOCKERHUB_TOKEN: CiQAIkWjMJDKU6Hu3pJIBf31dIl7xJQQEiccN7k1cCzGadGoT2gSTQBLz1D+uc9PMusYnFvXtJi25OqEUktDJs28d09jDyj9gcyTx9iX/JvOE3Dn2qnhrjwrUMk5bBhFjR7dHCr4mJgEVD5dXrd6yLGbDBu2
- kmsKeyName: projects/k8s-releng-prod/locations/global/keyRings/release/cryptoKeys/obs
  secretEnv:
    OBS_PASSWORD: CiQAXrrgPTLzLId8sRADEJYdBeOCBv7djdomvYV/9cdEbNKUBrMSPAA2Zz9jrArtxsYUKk1if2nZE6w0wPosrAKDpko8c/WErfYajTQ/yF88gZd3DdllDHmYzTqHCA0eLbie9A==

steps:
- name: gcr.io/cloud-builders/git
  dir: "go/src/k8s.io"
  args:
  - "clone"
  - "https://github.com/${_TOOL_ORG}/${_TOOL_REPO}"

- name: gcr.io/cloud-builders/git
  entrypoint: "bash"
  dir: "go/src/k8s.io/release"
  args:
  - '-c'
  - |
    git fetch
    echo "Checking out ${_TOOL_REF}"
    git checkout ${_TOOL_REF}

- name: gcr.io/k8s-staging-releng/k8s-cloud-builder:${_KUBE_CROSS_VERSION}
  dir: go/src/k8s.io/release
  env:
  - KREL_OUTPUT_PATH=/workspace/bin/krel
  - "TOOL_ORG=${_TOOL_ORG}"
  - "TOOL_REPO=${_TOOL_REPO}"
  - "TOOL_REF=${_TOOL_REF}"
  - "FORCE_BUILD_KREL=${_FORCE_BUILD_KREL}"
  args:
  - ./hack/get-krel

- name: gcr.io/k8s-staging-releng/k8s-cloud-builder:${_KUBE_CROSS_VERSION}
  dir: "/workspace"
  env:
  - "TOOL_ORG=${_TOOL_ORG}"
  - "TOOL_REPO=${_TOOL_REPO}"
  - "TOOL_REF=${_TOOL_REF}"
  - "BUILD_ID=${BUILD_ID}"
  - "K8S_ORG=${_K8S_ORG}"
  - "K8S_REPO=${_K8S_REPO}"
  - "K8S_REF=${_K8S_REF}"
  - GOOGLE_SERVICE_ACCOUNT_NAME=krel-staging@k8s-releng-prod.iam.gserviceaccount.com
  - "KUBE_PARALLEL_BUILD_MEMORY=64"
  secretEnv:
  - GITHUB_TOKEN
  - DOCKERHUB_TOKEN
  args:
  - "bin/krel"
  - "stage"
  - "--submit=false"
  - "${_NOMOCK}"
  - "--log-level=${_LOG_LEVEL}"
  - "--type=${_TYPE}"
  - "--branch=${_RELEASE_BRANCH}"
  - "--build-version=${_BUILDVERSION}"

- name: gcr.io/k8s-staging-releng/k8s-cloud-builder:${_KUBE_CROSS_VERSION}
  dir: "/workspace"
  env:
  - "TOOL_ORG=${_TOOL_ORG}"
  - "TOOL_REPO=${_TOOL_REPO}"
  - "TOOL_REF=${_TOOL_REF}"
  - "BUILD_ID=${BUILD_ID}"
  - "K8S_ORG=${_K8S_ORG}"
  - "K8S_REPO=${_K8S_REPO}"
  - "K8S_REF=${_K8S_REF}"
  secretEnv:
  - OBS_PASSWORD
  args:
  - "bin/krel"
  - "obs"
  - "stage"
  - "--submit=false"
  - "${_NOMOCK}"
  - "--log-level=${_LOG_LEVEL}"
  - "--type=${_TYPE}"
  - "--branch=${_RELEASE_BRANCH}"
  - "--build-version=${_BUILDVERSION}"

tags:
- ${_GCP_USER_TAG}
- ${_RELEASE_BRANCH}
- ${_NOMOCK_TAG}
- STAGE
- ${_GIT_TAG}
- ${_TYPE_TAG}
- ${_MAJOR_VERSION_TAG}
- ${_MINOR_VERSION_TAG}
- ${_PATCH_VERSION_TAG}
- ${_KUBERNETES_VERSION_TAG}

options:
  machineType: E2_HIGHCPU_32

substitutions:
  # _GIT_TAG will be filled with a git-based tag of the form vYYYYMMDD-hash, and
  # can be used as a substitution
  _GIT_TAG: '12345'
